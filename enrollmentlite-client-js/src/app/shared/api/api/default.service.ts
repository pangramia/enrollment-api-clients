/**
 * Enrollment API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.48.6
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { CampaignsResponse } from '../model/campaignsResponse';
import { DefaultsResponse } from '../model/defaultsResponse';
import { ErrorResponse } from '../model/errorResponse';
import { ExamsResponse } from '../model/examsResponse';
import { LangsResponse } from '../model/langsResponse';
import { RegionsResponse } from '../model/regionsResponse';
import { ThresholdFullResponse } from '../model/thresholdFullResponse';
import { ThresholdsResponse } from '../model/thresholdsResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DefaultService {

    protected basePath = 'https://api.pangramia.com/enroll/v1';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * Returns available campaigns for a specific region
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param lang Language to use in translated content
     */
    public campaigns(region: string, lang?: string, extraHttpRequestParams?: any): Observable<CampaignsResponse> {
        return this.campaignsWithHttpInfo(region, lang, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns  langs with default lang, regions with default region, and campaigns for default region. Everything is listed in default lang. This REST method is to speed-up js client communication.
     */
    public defaults(extraHttpRequestParams?: any): Observable<DefaultsResponse> {
        return this.defaultsWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns exams for the campaign
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param campaign Campaign (e.g. &#39;2015db4&#39; for day budget bachelor in 2015)
     * @param lang Language to use in translated content
     */
    public exams(region: string, campaign: string, lang?: string, extraHttpRequestParams?: any): Observable<ExamsResponse> {
        return this.examsWithHttpInfo(region, campaign, lang, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns language list in which content is available
     */
    public langs(extraHttpRequestParams?: any): Observable<LangsResponse> {
        return this.langsWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns available regions (e.g. countries, universities)
     * @param lang Language to use in translated content
     */
    public regions(lang?: string, extraHttpRequestParams?: any): Observable<RegionsResponse> {
        return this.regionsWithHttpInfo(lang, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Provide details on the given thresholds
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param campaign Campaign (e.g. &#39;2015db4&#39; for day budget bachelor in 2015)
     * @param thresholdIds Threshold / Speciality id (e.g. &#39;web&#39;), either one item or semi colon (;) separated list
     * @param suite Exam suite  (e.g.&#39;mathematics&#39;)
     * @param lang Language to use in translated content
     */
    public threshold(region: string, campaign: string, thresholdIds: string, suite?: string, lang?: string, extraHttpRequestParams?: any): Observable<ThresholdFullResponse> {
        return this.thresholdWithHttpInfo(region, campaign, thresholdIds, suite, lang, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Returns list of thresholds for the campaign. Use either page option or position = centered with gradeTotal.
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param campaign Campaign (e.g. &#39;2015db4&#39; for day budget bachelor in 2015)
     * @param suite Exam suite  (e.g.&#39;mathematics&#39;)
     * @param gradeTotal Sum of exam mark&#39;s grades
     * @param page Search results page
     * @param centered Position the result page to total grade
     * @param lang Language to use in translated content
     */
    public thresholds(region: string, campaign: string, suite: string, gradeTotal: number, page?: number, centered?: string, lang?: string, extraHttpRequestParams?: any): Observable<ThresholdsResponse> {
        return this.thresholdsWithHttpInfo(region, campaign, suite, gradeTotal, page, centered, lang, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * 
     * Returns available campaigns for a specific region
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param lang Language to use in translated content
     */
    public campaignsWithHttpInfo(region: string, lang?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/search/${region}'
                    .replace('${' + 'region' + '}', String(region));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'region' is not null or undefined
        if (region === null || region === undefined) {
            throw new Error('Required parameter region was null or undefined when calling campaigns.');
        }
        if (lang !== undefined) {
            queryParameters.set('lang', <any>lang);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Returns  langs with default lang, regions with default region, and campaigns for default region. Everything is listed in default lang. This REST method is to speed-up js client communication.
     */
    public defaultsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Returns exams for the campaign
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param campaign Campaign (e.g. &#39;2015db4&#39; for day budget bachelor in 2015)
     * @param lang Language to use in translated content
     */
    public examsWithHttpInfo(region: string, campaign: string, lang?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/search/${region}/${campaign}/exams'
                    .replace('${' + 'region' + '}', String(region))
                    .replace('${' + 'campaign' + '}', String(campaign));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'region' is not null or undefined
        if (region === null || region === undefined) {
            throw new Error('Required parameter region was null or undefined when calling exams.');
        }
        // verify required parameter 'campaign' is not null or undefined
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling exams.');
        }
        if (lang !== undefined) {
            queryParameters.set('lang', <any>lang);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Returns language list in which content is available
     */
    public langsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/langs';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Returns available regions (e.g. countries, universities)
     * @param lang Language to use in translated content
     */
    public regionsWithHttpInfo(lang?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/regions';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        if (lang !== undefined) {
            queryParameters.set('lang', <any>lang);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Provide details on the given thresholds
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param campaign Campaign (e.g. &#39;2015db4&#39; for day budget bachelor in 2015)
     * @param thresholdIds Threshold / Speciality id (e.g. &#39;web&#39;), either one item or semi colon (;) separated list
     * @param suite Exam suite  (e.g.&#39;mathematics&#39;)
     * @param lang Language to use in translated content
     */
    public thresholdWithHttpInfo(region: string, campaign: string, thresholdIds: string, suite?: string, lang?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/search/${region}/${campaign}/thresholds/${thresholdIds}'
                    .replace('${' + 'region' + '}', String(region))
                    .replace('${' + 'campaign' + '}', String(campaign))
                    .replace('${' + 'thresholdIds' + '}', String(thresholdIds));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'region' is not null or undefined
        if (region === null || region === undefined) {
            throw new Error('Required parameter region was null or undefined when calling threshold.');
        }
        // verify required parameter 'campaign' is not null or undefined
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling threshold.');
        }
        // verify required parameter 'thresholdIds' is not null or undefined
        if (thresholdIds === null || thresholdIds === undefined) {
            throw new Error('Required parameter thresholdIds was null or undefined when calling threshold.');
        }
        if (suite !== undefined) {
            queryParameters.set('suite', <any>suite);
        }

        if (lang !== undefined) {
            queryParameters.set('lang', <any>lang);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Returns list of thresholds for the campaign. Use either page option or position &#x3D; centered with gradeTotal.
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param campaign Campaign (e.g. &#39;2015db4&#39; for day budget bachelor in 2015)
     * @param suite Exam suite  (e.g.&#39;mathematics&#39;)
     * @param gradeTotal Sum of exam mark&#39;s grades
     * @param page Search results page
     * @param centered Position the result page to total grade
     * @param lang Language to use in translated content
     */
    public thresholdsWithHttpInfo(region: string, campaign: string, suite: string, gradeTotal: number, page?: number, centered?: string, lang?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/search/${region}/${campaign}/thresholds'
                    .replace('${' + 'region' + '}', String(region))
                    .replace('${' + 'campaign' + '}', String(campaign));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'region' is not null or undefined
        if (region === null || region === undefined) {
            throw new Error('Required parameter region was null or undefined when calling thresholds.');
        }
        // verify required parameter 'campaign' is not null or undefined
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling thresholds.');
        }
        // verify required parameter 'suite' is not null or undefined
        if (suite === null || suite === undefined) {
            throw new Error('Required parameter suite was null or undefined when calling thresholds.');
        }
        // verify required parameter 'gradeTotal' is not null or undefined
        if (gradeTotal === null || gradeTotal === undefined) {
            throw new Error('Required parameter gradeTotal was null or undefined when calling thresholds.');
        }
        if (suite !== undefined) {
            queryParameters.set('suite', <any>suite);
        }

        if (gradeTotal !== undefined) {
            queryParameters.set('gradeTotal', <any>gradeTotal);
        }

        if (page !== undefined) {
            queryParameters.set('page', <any>page);
        }

        if (centered !== undefined) {
            queryParameters.set('centered', <any>centered);
        }

        if (lang !== undefined) {
            queryParameters.set('lang', <any>lang);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
