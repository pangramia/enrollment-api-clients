/**
 * Enrollment API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.48.8
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams }               from '@angular/common/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { CampaignsResponse } from '../model/campaignsResponse';
import { DefaultsResponse } from '../model/defaultsResponse';
import { ErrorResponse } from '../model/errorResponse';
import { ExamsResponse } from '../model/examsResponse';
import { LangsResponse } from '../model/langsResponse';
import { RegionsResponse } from '../model/regionsResponse';
import { ThresholdFullResponse } from '../model/thresholdFullResponse';
import { ThresholdsResponse } from '../model/thresholdsResponse';
import { VersionResponse } from '../model/versionResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';


@Injectable()
export class DefaultService {

    protected basePath = 'https://api.pangramia.com/enroll/v1';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }



    /**
     * 
     * Returns available campaigns for a specific region
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param lang Language to use in translated content
     */
    public campaigns(region: string, lang?: string): Observable<CampaignsResponse> {
        if (region === null || region === undefined) {
            throw new Error('Required parameter region was null or undefined when calling campaigns.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (lang !== undefined) {
            queryParameters = queryParameters.set('lang', <any>lang);
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        return this.httpClient.get<any>(`${this.basePath}/search/${encodeURIComponent(String(region))}`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * 
     * Returns  langs with default lang, regions with default region, and campaigns for default region. Everything is listed in default lang. This REST method is to speed-up js client communication.
     */
    public defaults(): Observable<DefaultsResponse> {

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        return this.httpClient.get<any>(`${this.basePath}/`, 
        {
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * 
     * Returns exams for the campaign
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param campaign Campaign (e.g. &#39;2015db4&#39; for day budget bachelor in 2015)
     * @param lang Language to use in translated content
     */
    public exams(region: string, campaign: string, lang?: string): Observable<ExamsResponse> {
        if (region === null || region === undefined) {
            throw new Error('Required parameter region was null or undefined when calling exams.');
        }
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling exams.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (lang !== undefined) {
            queryParameters = queryParameters.set('lang', <any>lang);
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        return this.httpClient.get<any>(`${this.basePath}/search/${encodeURIComponent(String(region))}/${encodeURIComponent(String(campaign))}/exams`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * 
     * Returns language list in which content is available
     */
    public langs(): Observable<LangsResponse> {

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        return this.httpClient.get<any>(`${this.basePath}/langs`, 
        {
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * 
     * Returns available regions (e.g. countries, universities)
     * @param lang Language to use in translated content
     */
    public regions(lang?: string): Observable<RegionsResponse> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (lang !== undefined) {
            queryParameters = queryParameters.set('lang', <any>lang);
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        return this.httpClient.get<any>(`${this.basePath}/regions`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * 
     * Provide details on the given thresholds
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param campaign Campaign (e.g. &#39;2015db4&#39; for day budget bachelor in 2015)
     * @param thresholdIds Threshold / Speciality id (e.g. &#39;web&#39;), either one item or semi colon (;) separated list
     * @param suite Exam suite  (e.g.&#39;mathematics&#39;)
     * @param lang Language to use in translated content
     */
    public threshold(region: string, campaign: string, thresholdIds: string, suite?: string, lang?: string): Observable<ThresholdFullResponse> {
        if (region === null || region === undefined) {
            throw new Error('Required parameter region was null or undefined when calling threshold.');
        }
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling threshold.');
        }
        if (thresholdIds === null || thresholdIds === undefined) {
            throw new Error('Required parameter thresholdIds was null or undefined when calling threshold.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (suite !== undefined) {
            queryParameters = queryParameters.set('suite', <any>suite);
        }
        if (lang !== undefined) {
            queryParameters = queryParameters.set('lang', <any>lang);
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        return this.httpClient.get<any>(`${this.basePath}/search/${encodeURIComponent(String(region))}/${encodeURIComponent(String(campaign))}/thresholds/${encodeURIComponent(String(thresholdIds))}`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * 
     * Returns list of thresholds for the campaign. Use either page option or position &#x3D; centered with gradeTotal.
     * @param region Region (e.g. &#39;by.bsu&#39;)
     * @param campaign Campaign (e.g. &#39;2015db4&#39; for day budget bachelor in 2015)
     * @param suite Exam suite  (e.g.&#39;mathematics&#39;)
     * @param gradeTotal Sum of exam mark&#39;s grades
     * @param page Search results page
     * @param centered Position the result page to total grade
     * @param lang Language to use in translated content
     */
    public thresholds(region: string, campaign: string, suite: string, gradeTotal: number, page?: number, centered?: string, lang?: string): Observable<ThresholdsResponse> {
        if (region === null || region === undefined) {
            throw new Error('Required parameter region was null or undefined when calling thresholds.');
        }
        if (campaign === null || campaign === undefined) {
            throw new Error('Required parameter campaign was null or undefined when calling thresholds.');
        }
        if (suite === null || suite === undefined) {
            throw new Error('Required parameter suite was null or undefined when calling thresholds.');
        }
        if (gradeTotal === null || gradeTotal === undefined) {
            throw new Error('Required parameter gradeTotal was null or undefined when calling thresholds.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (suite !== undefined) {
            queryParameters = queryParameters.set('suite', <any>suite);
        }
        if (gradeTotal !== undefined) {
            queryParameters = queryParameters.set('gradeTotal', <any>gradeTotal);
        }
        if (page !== undefined) {
            queryParameters = queryParameters.set('page', <any>page);
        }
        if (centered !== undefined) {
            queryParameters = queryParameters.set('centered', <any>centered);
        }
        if (lang !== undefined) {
            queryParameters = queryParameters.set('lang', <any>lang);
        }

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        return this.httpClient.get<any>(`${this.basePath}/search/${encodeURIComponent(String(region))}/${encodeURIComponent(String(campaign))}/thresholds`, 
        {
            params: queryParameters,
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

    /**
     * 
     * Provide implementation version of the  deployed app. This may used for internal or debuggig purposes.
     */
    public version(): Observable<VersionResponse> {

        let headers = this.defaultHeaders;

        // authentication (APIKeyHeader) required
        if (this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        return this.httpClient.get<any>(`${this.basePath}/version`, 
        {
            headers: headers,
            withCredentials: this.configuration.withCredentials,
        });
    }

}
